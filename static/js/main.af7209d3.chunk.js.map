{"version":3,"sources":["Components/Container/Container.js","redux/contacts/contacts-actions.js","Components/ContactForm/ContactForm.js","Components/ContactList/ContactList.js","Components/Filter/Filter.js","App.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js"],"names":["Container","children","className","addContact","createAction","name","number","payload","id","uuidv4","deleteContact","changeFilter","ContactForm","state","handleSubmit","e","preventDefault","props","contacts","map","contact","toLowerCase","includes","alert","onSubmit","reset","handleChange","currentTarget","value","setState","this","type","pattern","title","required","onChange","Component","connect","items","dispatch","contactsActions","getfilterContacts","allContacts","filter","filterNormalize","onDeleteContact","onClick","event","target","App","createReducer","_","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","contactsPersistConfig","key","storage","blacklist","store","configureStore","reducer","persistReducer","contactsReducer","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.af7209d3.chunk.js","sourcesContent":["import React from 'react';\nimport './Container.scss';\n\nconst Container = ({ children }) => <div className=\"Container\">{children}</div>;\n\nexport default Container;\n","import { v4 as uuidv4 } from 'uuid';\nimport { createAction } from '@reduxjs/toolkit';\n\nconst addContact = createAction('contacts/add', ({ name, number }) => ({\n  payload: {\n    id: uuidv4(),\n    name,\n    number,\n  },\n}));\n\nconst deleteContact = createAction('contacts/delete');\n\nconst changeFilter = createAction('contacts/changeFilter');\n\nexport default { addContact, deleteContact, changeFilter };\n","import { Component } from 'react';\nimport { connect } from 'react-redux';\nimport contactsActions from '../../redux/contacts/contacts-actions';\nimport PropTypes from 'prop-types';\nimport './ContactForm.scss';\n\nclass ContactForm extends Component {\n  state = {\n    name: '',\n    number: '',\n  };\n\n  handleSubmit = e => {\n    const { name } = this.state;\n    e.preventDefault();\n\n    const getName = this.props.contacts.map(contact =>\n      contact.name.toLowerCase(),\n    );\n\n    if (getName.includes(name.toLowerCase())) {\n      alert(`${name} is already in contacts`);\n    } else {\n      this.props.onSubmit(this.state);\n    }\n\n    this.reset();\n  };\n\n  handleChange = e => {\n    const { name, value } = e.currentTarget;\n    this.setState({ [name]: value });\n  };\n\n  reset = () => {\n    this.setState({\n      name: '',\n      number: '',\n    });\n  };\n\n  render() {\n    return (\n      <form className=\"form\" onSubmit={this.handleSubmit}>\n        <label className=\"input_label\">\n          Name\n          <input\n            className=\"form_input\"\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            value={this.state.name}\n            onChange={this.handleChange}\n          />\n        </label>\n        <label className=\"input_label\">\n          Number\n          <input\n            className=\"form_input\"\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\n            title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\n            required\n            value={this.state.number}\n            onChange={this.handleChange}\n          />\n        </label>\n        <button className=\"submit_button\" type=\"submit\">\n          Add contact\n        </button>\n      </form>\n    );\n  }\n}\n\nContactForm.propTypes = {\n  name: PropTypes.string,\n  number: PropTypes.number,\n};\n\nconst mapStateToProps = state => ({\n  contacts: state.contacts.items,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onSubmit: (name, number) =>\n    dispatch(contactsActions.addContact(name, number)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\n","import { connect } from 'react-redux';\nimport contactsActions from '../../redux/contacts/contacts-actions';\nimport PropTypes from 'prop-types';\nimport './ContactList.scss';\n\nconst ContactList = ({ contacts, onDeleteContact }) => (\n  <ul className=\"contact_list\">\n    {contacts.map(({ id, name, number }) => (\n      <li className=\"contact_item\" key={id}>\n        <p className=\"contact_info\">\n          {name}: {number}\n        </p>\n        <button\n          className=\"add_button\"\n          type=\"button\"\n          onClick={() => onDeleteContact(id)}\n        >\n          Delete\n        </button>\n      </li>\n    ))}\n  </ul>\n);\n\nContactList.propTypes = {\n  contacts: PropTypes.array.isRequired,\n  id: PropTypes.string,\n  name: PropTypes.string,\n  number: PropTypes.number,\n  onDeleteContact: PropTypes.func.isRequired,\n};\n\nconst getfilterContacts = (allContacts, filter) => {\n  const filterNormalize = filter.toLowerCase();\n  return allContacts.filter(contact =>\n    contact.name.toLowerCase().includes(filterNormalize),\n  );\n};\n\nconst mapStateToProps = ({ contacts: { items, filter } }) => ({\n  contacts: getfilterContacts(items, filter),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onDeleteContact: id => dispatch(contactsActions.deleteContact(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","import { connect } from 'react-redux';\nimport contactsActions from '../../redux/contacts/contacts-actions';\nimport PropTypes from 'prop-types';\nimport './Filter.scss';\n\nconst Filter = ({ value, onChange }) => (\n  <label className=\"filter_label\">\n    Find contacts by name\n    <input\n      className=\"filter_input\"\n      type=\"text\"\n      value={value}\n      onChange={onChange}\n    ></input>\n  </label>\n);\n\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  value: state.contacts.filter,\n});\n\nconst mapToDispatchProps = dispatch => ({\n  onChange: event => dispatch(contactsActions.changeFilter(event.target.value)),\n});\n\nexport default connect(mapStateToProps, mapToDispatchProps)(Filter);\n","import Container from './Components/Container/Container';\nimport ContactForm from './Components/ContactForm/ContactForm';\nimport ContactList from './Components/ContactList/ContactList';\nimport Filter from './Components/Filter/Filter';\nimport './App.scss';\n\nconst App = () => (\n  <Container>\n    <h1 className=\"main_title\">Phonebook</h1>\n    <ContactForm />\n    <h2 className=\"contacts_title\">Contacts</h2>\n    <Filter />\n    <ContactList />\n  </Container>\n);\n\nexport default App;\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport contactsActions from '../../redux/contacts/contacts-actions';\n\nconst items = createReducer([], {\n  [contactsActions.addContact]: (state, { payload }) => [...state, payload],\n  [contactsActions.deleteContact]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n\nconst filter = createReducer('', {\n  [contactsActions.changeFilter]: (_, { payload }) => payload,\n});\n\nexport default combineReducers({\n  items,\n  filter,\n});\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport logger from 'redux-logger';\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport contactsReducer from './contacts/contacts-reducer';\nimport storage from 'redux-persist/lib/storage';\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  logger,\n];\n\nconst contactsPersistConfig = {\n  key: 'contacts',\n  storage,\n  blacklist: ['filter'],\n};\n\nconst store = configureStore({\n  reducer: {\n    contacts: persistReducer(contactsPersistConfig, contactsReducer),\n  },\n  middleware,\n  devTools: process.env.NODE_ENV === 'development',\n});\n\nconst persistor = persistStore(store);\n\nexport default { store, persistor };\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport App from './App';\nimport store from './redux/store';\nimport './styles/base.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}